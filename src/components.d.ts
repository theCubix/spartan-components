/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';

import '@stencil/router';
import '@stencil/state-tunnel';


export namespace Components {

  interface ScApp {}
  interface ScAppAttributes extends StencilHTMLAttributes {}

  interface ScBackdrop {}
  interface ScBackdropAttributes extends StencilHTMLAttributes {}

  interface ScCard {
    'coloured': boolean;
    'colouredAccent': boolean;
    'heading': string;
    'imageAlt': string;
    'imageSrc': string;
  }
  interface ScCardAttributes extends StencilHTMLAttributes {
    'coloured'?: boolean;
    'colouredAccent'?: boolean;
    'heading'?: string;
    'imageAlt'?: string;
    'imageSrc'?: string;
  }

  interface ScContainer {}
  interface ScContainerAttributes extends StencilHTMLAttributes {}

  interface ScGrid {}
  interface ScGridAttributes extends StencilHTMLAttributes {}

  interface ScIconCode {
    'coloured': boolean;
    'size': number;
  }
  interface ScIconCodeAttributes extends StencilHTMLAttributes {
    'coloured'?: boolean;
    'size'?: number;
  }

  interface ScIconHome {
    'coloured': boolean;
    'size': number;
  }
  interface ScIconHomeAttributes extends StencilHTMLAttributes {
    'coloured'?: boolean;
    'size'?: number;
  }

  interface ScIconInfo {
    'coloured': boolean;
    'size': number;
  }
  interface ScIconInfoAttributes extends StencilHTMLAttributes {
    'coloured'?: boolean;
    'size'?: number;
  }

  interface ScIconMenu {
    'coloured': boolean;
  }
  interface ScIconMenuAttributes extends StencilHTMLAttributes {
    'coloured'?: boolean;
  }

  interface ScList {}
  interface ScListAttributes extends StencilHTMLAttributes {}

  interface ScNavbar {
    'name': string;
    'toggle': () => void;
  }
  interface ScNavbarAttributes extends StencilHTMLAttributes {
    'name'?: string;
  }

  interface ScHome {}
  interface ScHomeAttributes extends StencilHTMLAttributes {}

  interface ScPill {
    'colour': string;
  }
  interface ScPillAttributes extends StencilHTMLAttributes {
    'colour'?: string;
  }

  interface ScSection {
    'hasCentered': boolean;
    'hasNomargin': boolean;
    'isFullheight': boolean;
  }
  interface ScSectionAttributes extends StencilHTMLAttributes {
    'hasCentered'?: boolean;
    'hasNomargin'?: boolean;
    'isFullheight'?: boolean;
  }

  interface ScTooltip {
    'tooltip': string;
    'underlined': boolean;
  }
  interface ScTooltipAttributes extends StencilHTMLAttributes {
    'tooltip'?: string;
    'underlined'?: boolean;
  }
}

declare global {
  interface StencilElementInterfaces {
    'ScApp': Components.ScApp;
    'ScBackdrop': Components.ScBackdrop;
    'ScCard': Components.ScCard;
    'ScContainer': Components.ScContainer;
    'ScGrid': Components.ScGrid;
    'ScIconCode': Components.ScIconCode;
    'ScIconHome': Components.ScIconHome;
    'ScIconInfo': Components.ScIconInfo;
    'ScIconMenu': Components.ScIconMenu;
    'ScList': Components.ScList;
    'ScNavbar': Components.ScNavbar;
    'ScHome': Components.ScHome;
    'ScPill': Components.ScPill;
    'ScSection': Components.ScSection;
    'ScTooltip': Components.ScTooltip;
  }

  interface StencilIntrinsicElements {
    'sc-app': Components.ScAppAttributes;
    'sc-backdrop': Components.ScBackdropAttributes;
    'sc-card': Components.ScCardAttributes;
    'sc-container': Components.ScContainerAttributes;
    'sc-grid': Components.ScGridAttributes;
    'sc-icon-code': Components.ScIconCodeAttributes;
    'sc-icon-home': Components.ScIconHomeAttributes;
    'sc-icon-info': Components.ScIconInfoAttributes;
    'sc-icon-menu': Components.ScIconMenuAttributes;
    'sc-list': Components.ScListAttributes;
    'sc-navbar': Components.ScNavbarAttributes;
    'sc-home': Components.ScHomeAttributes;
    'sc-pill': Components.ScPillAttributes;
    'sc-section': Components.ScSectionAttributes;
    'sc-tooltip': Components.ScTooltipAttributes;
  }


  interface HTMLScAppElement extends Components.ScApp, HTMLStencilElement {}
  var HTMLScAppElement: {
    prototype: HTMLScAppElement;
    new (): HTMLScAppElement;
  };

  interface HTMLScBackdropElement extends Components.ScBackdrop, HTMLStencilElement {}
  var HTMLScBackdropElement: {
    prototype: HTMLScBackdropElement;
    new (): HTMLScBackdropElement;
  };

  interface HTMLScCardElement extends Components.ScCard, HTMLStencilElement {}
  var HTMLScCardElement: {
    prototype: HTMLScCardElement;
    new (): HTMLScCardElement;
  };

  interface HTMLScContainerElement extends Components.ScContainer, HTMLStencilElement {}
  var HTMLScContainerElement: {
    prototype: HTMLScContainerElement;
    new (): HTMLScContainerElement;
  };

  interface HTMLScGridElement extends Components.ScGrid, HTMLStencilElement {}
  var HTMLScGridElement: {
    prototype: HTMLScGridElement;
    new (): HTMLScGridElement;
  };

  interface HTMLScIconCodeElement extends Components.ScIconCode, HTMLStencilElement {}
  var HTMLScIconCodeElement: {
    prototype: HTMLScIconCodeElement;
    new (): HTMLScIconCodeElement;
  };

  interface HTMLScIconHomeElement extends Components.ScIconHome, HTMLStencilElement {}
  var HTMLScIconHomeElement: {
    prototype: HTMLScIconHomeElement;
    new (): HTMLScIconHomeElement;
  };

  interface HTMLScIconInfoElement extends Components.ScIconInfo, HTMLStencilElement {}
  var HTMLScIconInfoElement: {
    prototype: HTMLScIconInfoElement;
    new (): HTMLScIconInfoElement;
  };

  interface HTMLScIconMenuElement extends Components.ScIconMenu, HTMLStencilElement {}
  var HTMLScIconMenuElement: {
    prototype: HTMLScIconMenuElement;
    new (): HTMLScIconMenuElement;
  };

  interface HTMLScListElement extends Components.ScList, HTMLStencilElement {}
  var HTMLScListElement: {
    prototype: HTMLScListElement;
    new (): HTMLScListElement;
  };

  interface HTMLScNavbarElement extends Components.ScNavbar, HTMLStencilElement {}
  var HTMLScNavbarElement: {
    prototype: HTMLScNavbarElement;
    new (): HTMLScNavbarElement;
  };

  interface HTMLScHomeElement extends Components.ScHome, HTMLStencilElement {}
  var HTMLScHomeElement: {
    prototype: HTMLScHomeElement;
    new (): HTMLScHomeElement;
  };

  interface HTMLScPillElement extends Components.ScPill, HTMLStencilElement {}
  var HTMLScPillElement: {
    prototype: HTMLScPillElement;
    new (): HTMLScPillElement;
  };

  interface HTMLScSectionElement extends Components.ScSection, HTMLStencilElement {}
  var HTMLScSectionElement: {
    prototype: HTMLScSectionElement;
    new (): HTMLScSectionElement;
  };

  interface HTMLScTooltipElement extends Components.ScTooltip, HTMLStencilElement {}
  var HTMLScTooltipElement: {
    prototype: HTMLScTooltipElement;
    new (): HTMLScTooltipElement;
  };

  interface HTMLElementTagNameMap {
    'sc-app': HTMLScAppElement
    'sc-backdrop': HTMLScBackdropElement
    'sc-card': HTMLScCardElement
    'sc-container': HTMLScContainerElement
    'sc-grid': HTMLScGridElement
    'sc-icon-code': HTMLScIconCodeElement
    'sc-icon-home': HTMLScIconHomeElement
    'sc-icon-info': HTMLScIconInfoElement
    'sc-icon-menu': HTMLScIconMenuElement
    'sc-list': HTMLScListElement
    'sc-navbar': HTMLScNavbarElement
    'sc-home': HTMLScHomeElement
    'sc-pill': HTMLScPillElement
    'sc-section': HTMLScSectionElement
    'sc-tooltip': HTMLScTooltipElement
  }

  interface ElementTagNameMap {
    'sc-app': HTMLScAppElement;
    'sc-backdrop': HTMLScBackdropElement;
    'sc-card': HTMLScCardElement;
    'sc-container': HTMLScContainerElement;
    'sc-grid': HTMLScGridElement;
    'sc-icon-code': HTMLScIconCodeElement;
    'sc-icon-home': HTMLScIconHomeElement;
    'sc-icon-info': HTMLScIconInfoElement;
    'sc-icon-menu': HTMLScIconMenuElement;
    'sc-list': HTMLScListElement;
    'sc-navbar': HTMLScNavbarElement;
    'sc-home': HTMLScHomeElement;
    'sc-pill': HTMLScPillElement;
    'sc-section': HTMLScSectionElement;
    'sc-tooltip': HTMLScTooltipElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
